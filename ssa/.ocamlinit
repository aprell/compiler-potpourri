open Three_address_code__IR
open Three_address_code__Parse
open Control_flow

let src1 = [
  "test() {";
  "    a := 5 + 2";
  "    b := a - 4";
  "    a := a + b";
  "    c := a - 1";
  "    return c";
  "}";
]

let src2 = [
  "test(A) {";
  "    x := 1";
  "    A[0] := 2";
  "    A[1] := x + 3";
  "    y := A[0]";
  "    return y";
  "}";
]

let cfg_of src =
  Cfg.construct [
    Basic_block.create "B1" ~source:
      { entry = "test";
        exits = [];
        stmts = List.map ref (parse_prog src) }
  ]

let print ~text block =
  print_endline text;
  print_endline (Basic_block.to_string block);
  print_newline ()

let test cfg =
  let open Ssa in
  convert_to_ssa cfg;
  let block = cfg.(1).block in
  print ~text:"Before optimization:" block;
  Ssa__Optim.optimize ~dump:true ();
  print ~text:"After optimization:" block

let () =
  List.(iter test (map cfg_of [src1; src2]))
