open Three_address_code__IR
open Three_address_code__Parse
open Control_flow

let src1 = {|
  test() {
      a := 5 + 2
      b := a - 4
      a := a + b
      c := a - 1
      return c
  }
|}

let src2 = {|
  test() {
      a := 4
      b := 2
      s := a + b
      t := a + b
      p := s * t
      return p
  }
|}

let src3 = {|
  test(A) {
      x := 1
      A[0] := 2
      A[1] := x + 3
      y := A[0]
      return y
  }
|}

let cfg_of src =
  Cfg.construct [
    Basic_block.create ()
      ~number:1
      ~stmts:(List.map ref (parse_prog src))
  ]

let print ~text block =
  print_endline text;
  print_endline (Basic_block.to_string block);
  print_newline ()

let test cfg =
  let ssa_graph = Ssa.construct cfg in
  let { Cfg.Node.block; _ } = Cfg.get_node 1 cfg in
  print ~text:"Before optimization:" block;
  let _ = Optim.optimize cfg ssa_graph ~dump:true in
  print ~text:"After optimization:" block

let () =
  List.(iter test (map cfg_of [src1; src2; src3]))
